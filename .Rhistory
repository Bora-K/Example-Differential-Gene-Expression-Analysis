library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
# Load the necessarylLibraries
library(tidyverse)
library(GEOquery)
library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
getwd()
library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
library(GEOquery)
library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
# Load the necessary libraries
library(tidyverse)
library(GEOquery)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id = Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id = Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id <- Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, "Count") %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id <- "Count")  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, "Count") %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id <- "Count")  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
# Load the necessary libraries
library(tidyverse)
library(rlang)
library(GEOquery)
library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
update.packages()
update.packages()
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename_with(~gsm_id, .cols = "Count")  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename_with(~gsm_id, .cols = "Count")  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
# Load the necessary libraries
library(tidyverse)
library(rlang)
library(GEOquery)
library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename_with(~gsm_id, .cols = "Count")  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
invisible(lapply(paste0("package:", names(sessionInfo()$otherPkgs)),
detach, character.only = TRUE, unload = TRUE))
# Load the necessary libraries
library(tidyverse)
library(GEOquery)
#library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
invisible(lapply(paste0("package:", names(sessionInfo()$otherPkgs)),
detach, character.only = TRUE, unload = TRUE))
# Load the necessary libraries
#library(tidyverse)
library(GEOquery)
library(dplyr)
library(DESeq2)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID from filename
read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count) %>%  # Keep gene ID, symbol, and counts
rename(!!gsm_id := Count)  # Rename "Count" column to GSM ID (e.g., "GSM7008608")
}
# Read all files and merge by "Id" and "Symbol"
count_matrix <- files %>%
map(read_counts) %>%
reduce(full_join, by = c("Id", "Symbol"))  # Merge all data frames by gene ID/symbol
return(df)
# Function to read a single file and rename the "Count" column to the GSM ID
# Function to read and rename "Count" to GSM ID (using base R renaming)
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID
# Read the file and rename "Count" using base R (no dplyr::rename)
df <- read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count)
# Rename "Count" column to GSM ID using base R
colnames(df)[colnames(df) == "Count"] <- gsm_id
return(df)
}
# Read and merge all files
count_matrix <- files %>%
purrr::map(read_counts) %>%
purrr::reduce(full_join, by = c("Id", "Symbol"))
# Load the necessary libraries
library(tidyverse)
library(GEOquery)
library(dplyr)
library(DESeq2)
library(purrr)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
# Function to read and rename "Count" to GSM ID (using base R renaming)
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID
# Read the file and rename "Count" using base R (no dplyr::rename)
df <- read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count)
# Rename "Count" column to GSM ID using base R
colnames(df)[colnames(df) == "Count"] <- gsm_id
return(df)
}
# Read and merge all files
count_matrix <- files %>%
purrr::map(read_counts) %>%
purrr::reduce(full_join, by = c("Id", "Symbol"))
# Set row names to gene/transcript IDs
rownames(count_matrix) <- count_matrix$Id
count_matrix <- count_matrix[, !(colnames(count_matrix) %in% c("Id", "Symbol"))]
head(count_matrix)
# Verify the cleaned matrix
head(count_matrix)
# Get the cobdition name
name_condition <- pData(phenoData(gse[[1]]))["characteristics_ch1.3"][1,1]
# Get metadata
metadata <- pData(phenoData(gse[[1]])) %>%
rownames_to_column("GSM_ID") %>%
dplyr::select(GSM_ID, condition = name_condition)  # Replace with your metadata column
pData(phenoData(gse[[1]]))
pData(phenoData(gse[[1]]))["characteristics_ch1.3"]
colnames(pData(phenoData(gse[[1]]))["characteristics_ch1.3"])
colnames(pData(phenoData(gse[[1]]))["characteristics_ch1.3"])[1]
# Get the cobdition name
name_condition <- "characteristics_ch1.3"
# Get metadata
metadata <- pData(phenoData(gse[[1]])) %>%
rownames_to_column("GSM_ID") %>%
dplyr::select(GSM_ID, condition = name_condition)  # Replace with your metadata column
# Check alignment
all(colnames(count_matrix) %in% metadata$GSM_ID)  # Should return TRUE
# Create DESeq2 object
dds <- DESeqDataSetFromMatrix(
countData = count_matrix,
colData = metadata,
design = ~ condition
)
# Filter and run DESeq2 (as before)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
dds <- DESeq(dds)
# See results
res <- results(dds, name = name_condition, alpha = 0.05)
cond1 <- pData(phenoData(gse[[1]]))[name_condition][1,1]
# See results
res <- results(dds, name = cond1, alpha = 0.05)
cond1
resultsNames(dds)
a << resultsNames(dds)
a <- resultsNames(dds)
a
print(a)
print(a)[2]
print(a)[1]
metadata
design
design = ~ condition
design
condition
# Create DESeq2 object
dds <- DESeqDataSetFromMatrix(
countData = count_matrix,
colData = metadata,
design = ~ condition
)
# Filter and run DESeq2 (as before)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
dds <- DESeq(dds)
cond1 <- pData(phenoData(gse[[1]]))[name_condition][1,1]
# See results
res <- results(dds, name = cond1, alpha = 0.05)
metadat
metadata
type(metadata)
type(metadata[condition])
typeof(metadata)
typeof(metadata[condition])
typeof(metadata["condition"])
metadata$condition
metadata$condition <- as.factor(metadata$condition)
metadata$condition
# Check alignment
all(colnames(count_matrix) %in% metadata$GSM_ID)  # Should return TRUE
# Create DESeq2 object
dds <- DESeqDataSetFromMatrix(
countData = count_matrix,
colData = metadata,
design = ~ condition
)
# Filter and run DESeq2 (as before)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
dds <- DESeq(dds)
cond1 <- pData(phenoData(gse[[1]]))[name_condition][1,1]
resultsNames(dds)
resultsNames()
resultsNames
?resultsNames
# See results
res <- results(dds, name = "Intercept", alpha = 0.05)
res
resultsNames(dds)
resultsNames(dds)[2]
# Get metadata
metadata <- pData(phenoData(gse[[1]])) %>%
rownames_to_column("GSM_ID") %>%
dplyr::select(GSM_ID, condition = name_condition)  # Replace with your metadata column
metadata$condition <- gsub("Condition: ", "", metadata$condition)
# Load the necessary libraries
library(tidyverse)
library(GEOquery)
library(dplyr)
library(DESeq2)
library(purrr)
# Download the GEO dataset
gse <- getGEO(GEO = "GSE223954", GSEMatrix = TRUE)
# Untar the raw counts
untar("data/GSE223954_RAW.tar", exdir = "data")
# Get the filenames
files <- list.files("data", pattern = "\\.gz$", full.names = TRUE)
# Function to read a single file and rename the "Count" column to the GSM ID
# Function to read and rename "Count" to GSM ID (using base R renaming)
read_counts <- function(file) {
gsm_id <- str_extract(basename(file), "^GSM\\d+")  # Extract GSM ID
# Read the file and rename "Count" using base R (no dplyr::rename)
df <- read.delim(file, check.names = FALSE) %>%
dplyr::select(Id, Symbol, Count)
# Rename "Count" column to GSM ID using base R
colnames(df)[colnames(df) == "Count"] <- gsm_id
return(df)
}
# Read and merge all files
count_matrix <- files %>%
purrr::map(read_counts) %>%
purrr::reduce(full_join, by = c("Id", "Symbol"))
# Set row names to gene/transcript IDs
rownames(count_matrix) <- count_matrix$Id
count_matrix <- count_matrix[, !(colnames(count_matrix) %in% c("Id", "Symbol"))]
# Verify the cleaned matrix
head(count_matrix)
# Get the cobdition name
name_condition <- "characteristics_ch1.3"
# Get metadata
metadata <- pData(phenoData(gse[[1]])) %>%
rownames_to_column("GSM_ID") %>%
dplyr::select(GSM_ID, condition = name_condition)  # Replace with your metadata column
metadata$condition <- gsub("Condition: ", "", metadata$condition)
metadata$condition <- as.factor(metadata$condition)
# Check alignment
all(colnames(count_matrix) %in% metadata$GSM_ID)  # Should return TRUE
# Create DESeq2 object
dds <- DESeqDataSetFromMatrix(
countData = count_matrix,
colData = metadata,
design = ~ condition
)
# Filter and run DESeq2 (as before)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
dds <- DESeq(dds)
resultsNames(dds)
metadata
metadata$condition <- gsub("Condition: ", "", metadata$condition)
metadata
library(stringr)
metadata$condition <- str_remove(metadata$condition, "Condition: ")
metadata
# Get metadata
metadata <- pData(phenoData(gse[[1]])) %>%
rownames_to_column("GSM_ID") %>%
dplyr::select(GSM_ID, condition = name_condition)  # Replace with your metadata column
library(stringr)
metadata$condition <- str_remove(metadata$condition, "Condition: ")
metadata
metadata$condition[1]
metadata$condition <- str_remove(metadata$condition, "condition: ")
metadata
metadata$condition <- as.factor(metadata$condition)
metadata
pData(phenoData(gse[[1]]))
# Check alignment
all(colnames(count_matrix) %in% metadata$GSM_ID)  # Should return TRUE
# Create DESeq2 object
dds <- DESeqDataSetFromMatrix(
countData = count_matrix,
colData = metadata,
design = ~ condition
)
# Filter and run DESeq2 (as before)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep, ]
dds <- DESeq(dds)
resultsNames(dds)
# See results
res <- results(dds, name = "condition_shFGFR1_vs_Control", alpha = 0.05)
res
significant_genes <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
head(significant_genes[order(significant_genes$padj), ], 10)  # Top 10 genes
res
head(significant_genes[order(significant_genes$padj), ], 10)  # Top 10 genes
